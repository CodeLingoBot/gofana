package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _templates_config_js = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x56\x4d\x6f\xe3\x36\x10\xbd\xfb\x57\x0c\x7c\x71\x76\xe1\x8d\x36\x6d\x4f\xda\x6e\xd1\x6e\x52\x2c\x16\xe8\xa9\xdd\x1e\x8a\x60\x61\x8c\x45\xca\x62\x4b\x91\x2a\x3f\xea\x18\x41\xfe\x7b\x1f\x29\xca\x92\x83\xb4\x87\xa2\x02\x12\xd9\xf3\xcd\x37\x33\x8f\xae\x2a\x7a\xff\x9e\x6e\xad\x69\xd5\x21\x3a\x0e\xca\x9a\x15\x64\x4d\x16\x5c\xff\xee\x49\x79\x3a\x76\xd2\x49\x3a\xd9\x48\x47\xa5\x35\xb5\xca\x08\x0a\x9d\x84\x11\xc4\x1f\x1d\xb7\x6c\xb8\x78\x94\x10\xd7\xf4\xb9\x83\x63\xab\x74\xb2\x32\x81\x95\xf1\x34\xb0\xe3\x5e\x06\xe9\xe0\xcc\x21\x65\xe9\xa3\x0f\xb4\x97\xe4\x65\x7a\xb5\xcb\x70\xf0\x76\xd1\x10\x64\x39\x55\xab\x1c\x4c\x83\xea\xe5\xf5\x6a\x25\x24\x4a\x90\x57\xf7\x1b\xf8\x05\x65\x0e\x7e\xf3\x65\x4b\x6d\x34\x4d\x4a\x7d\xf5\x4b\x11\xbe\xa2\xc7\x15\xd1\x3a\x7a\xc4\x0f\x4e\x35\x61\xfd\x6e\x05\x81\x93\x21\x3a\x43\x46\x1e\x69\xb2\xbc\x7a\x4c\x8a\xf4\x54\xaf\xe9\x8e\x03\x93\xb7\xd1\x35\xd2\x17\xe9\x6b\x40\xf4\xdf\x9e\x73\x80\x14\xb5\x04\x25\xc6\x31\x51\x15\x30\xb4\xd4\xca\xd0\x74\x04\x54\x50\xa0\xdf\x12\x1b\x63\x43\x46\x30\x7f\x11\x40\xc6\xfd\x25\x89\x3d\x09\xf6\xdd\xde\xb2\x83\x28\x58\xc7\x07\x79\x0e\x4d\x6f\xe8\x37\xb4\xa6\x61\x43\x1d\xc3\xb8\x8f\x3a\xa8\x01\xc0\xdb\x36\x43\xe7\x01\x3a\x85\xd3\x00\xe4\x16\x2e\x87\x11\xe7\xbb\x0f\x35\x05\x17\x65\x92\xf7\xec\xfe\x40\xbf\x43\x06\x3d\xc1\x96\xde\xff\x9a\x17\x8d\x60\x64\x9b\x43\x4c\x41\x52\x5e\x71\x3e\x72\xaa\x3f\x4b\x46\xf3\x72\xdc\x02\x32\x5d\xa9\x36\xcf\xd6\x45\xf1\xaf\x96\x69\xf6\xec\x61\xce\x11\x31\x4c\x50\x4d\xc6\xa7\xce\x15\x46\xa7\xc9\x9f\x30\x5f\x0f\xd4\x85\x30\xd4\x55\x05\xa9\x33\x38\x71\x3d\xb0\xf7\x47\xeb\xc4\xf7\xc2\xf6\x18\xbf\x7a\xb0\x2e\x4c\x41\xab\xb1\xdf\x73\x85\xbe\xce\xc3\x92\x9e\xc7\x47\x42\x41\xd7\x98\xc3\xa1\x53\x41\xfe\xfa\xf3\x4f\xf4\xf4\x54\x74\x87\x22\x9c\xad\x29\x23\x5b\xd3\x66\x52\x6d\xb6\x67\x0d\x8a\xab\x69\x8d\x78\xcf\x82\xad\x27\x93\xa7\xed\x9c\x53\x1a\x71\x4e\x53\x4a\xf8\x64\x5a\x1d\x1f\xee\x3e\x5c\x94\xa0\xb2\x50\xec\x5f\x28\x61\x52\xbd\x58\xc2\x65\xb0\x7f\x2a\x61\xce\xd3\x60\x35\x6d\xff\x42\x96\xdb\xac\x98\xe7\x79\x91\x2d\xe3\x0e\x28\x6c\x9a\xac\xe7\x55\x6c\x4a\x83\xb4\x6d\x58\x77\xd6\x87\xfa\xe6\xab\xaf\xbf\x59\x58\x3d\x9b\xc8\x67\x15\xe2\x35\xef\xe8\x47\x6d\xf7\xac\x2f\x29\x87\xec\x90\xf7\xe6\x7f\xdb\xd9\xea\x9c\xb0\x22\x3f\xc8\x46\xb5\xa7\x3c\xc5\x5a\xf5\x65\x47\x16\xbb\x21\xd9\x61\x8f\x9d\xf4\x98\xdf\xa9\x84\x51\xb8\x84\xb0\xe7\x87\x5d\xb1\xa9\xe9\xe6\xed\xdb\xf9\x88\x73\xaa\x69\x49\x3a\xdb\xcb\x39\x43\xd1\x17\xe5\xce\xd9\x98\xa6\x70\x53\x9d\x0d\xaa\xc4\xb5\x55\xd1\x83\xb7\xad\xd9\x2c\xa3\x26\x86\x4d\x74\xc3\x1a\x5b\x83\x0f\x42\x79\xde\x83\x23\xa2\xf1\x58\x3b\x41\x4d\xc7\xe6\x00\x6e\x3a\xb2\x33\xa0\xc4\xe2\x58\xb4\xbb\xa2\xdd\x15\xed\xd4\xa0\x67\xe1\x17\x1b\x9e\x88\xda\x0f\x3c\xf3\xf7\xa0\xf9\xa4\x15\x28\xbc\x95\x0c\xfe\x95\xb3\xeb\x8f\x0f\xdc\x63\xe1\x31\xa6\x37\xfd\x7a\x8b\xff\xdd\xba\x28\x27\x9f\xdd\x14\xad\xd8\x2c\xf2\x7e\x1a\xa9\xe3\xc8\x26\x1f\x6f\x6a\xd3\xb4\xfb\xd3\xa5\x82\x53\xa0\xec\x2d\x22\x4a\x4e\xd7\x41\x31\x53\xe9\xd6\xd1\xf6\x38\xc7\xfb\x9c\x4a\x8d\x6e\xb0\xbe\xd0\xa7\xf2\x73\x30\x7c\x06\x3b\xe3\xac\x4d\x74\x2a\x9c\xb6\xb4\x8f\x63\xd6\x60\x07\x90\x59\x9f\x59\xdd\xe1\xd6\x73\xb6\x27\x6e\x1a\x25\x40\x57\xac\xf5\x69\x44\x17\x15\xcc\xfd\x9c\x66\x84\x45\x0f\x6e\x5a\x8c\xc8\x94\x0d\xcd\xdd\xbc\x34\x1e\xb7\xb9\x15\xb8\x88\x8d\xb0\x47\xe0\x1c\xd0\xc4\xc1\xe1\x42\x7c\x18\xf3\x6e\xa6\x0b\xf4\x0d\x7d\x3b\xcf\x67\xb6\xfb\x6e\x0a\x38\x3a\xef\xb2\x70\x37\x3a\xd7\x4b\xc7\x8b\xc9\xf9\x41\x88\x84\xb1\x23\x7b\x34\x85\x15\x50\xa4\x91\xda\x9f\xdb\x14\x71\x36\xbf\x3c\x04\xdc\x72\xb3\x01\xe1\xa8\xbd\xf4\xa0\xf2\xb5\xa6\xfb\x2f\xdb\xa5\x93\x93\x7f\x46\xe5\x24\x7e\x75\xf4\x56\x44\x8d\x79\x4c\xae\x63\x7c\x8c\x92\x16\xe5\xb7\x03\xf9\xce\x46\x9d\xda\x4b\xda\xb2\x90\x62\x19\x24\x8d\x9c\x1c\x87\x6a\xaa\x77\x41\xf4\x67\x4b\x21\x07\x10\x9e\x34\x8d\x4a\xec\x7f\xbf\x9e\x6d\xae\x47\x02\x5b\x9f\x6b\x7b\x1a\xe1\x78\x7a\xf5\x6e\x95\xfe\xfe\x0e\x00\x00\xff\xff\xd0\xd4\x48\x30\x33\x09\x00\x00")

func templates_config_js_bytes() ([]byte, error) {
	return bindata_read(
		_templates_config_js,
		"templates/config.js",
	)
}

func templates_config_js() (*asset, error) {
	bytes, err := templates_config_js_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/config.js", size: 2355, mode: os.FileMode(420), modTime: time.Unix(1421942739, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templates_datasource_gofana_js = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x56\x4b\x6b\xdb\x40\x10\xbe\xfb\x57\x0c\x22\x20\x99\x08\x39\xc7\x60\x13\x4a\x9b\x50\xe8\xa1\x87\x3e\x7c\x0a\xa1\xac\xb5\x63\x7b\x53\x69\x57\xd9\x87\xc1\x84\xfc\xf7\xce\xae\xac\x67\x63\x70\xc9\xa3\x3a\x18\xed\xee\x37\xf3\xcd\xcc\x37\x23\x2f\xc7\xb5\x90\x98\xdc\x4e\x00\x62\x26\x37\xae\x60\x3a\x4e\xfd\xa2\x50\x9c\x99\x6d\xfd\xfe\x7b\x25\xeb\x97\x52\x95\x28\x6d\x3c\xb9\x4b\x27\x6b\x27\x73\x2b\x94\x84\xe4\x60\x96\xc2\xaf\x14\x08\x39\x85\x47\x0f\x75\x06\xc1\x58\x2d\x72\x1b\x2f\x26\xb4\xb1\x63\x1a\x4a\xc5\x5d\x81\x70\x05\x07\x93\xac\xde\x48\xe2\x8d\x66\x6b\x26\x59\x66\x50\xef\x44\x8e\x26\x9e\x06\x9b\xfa\x38\x5b\xb3\xdc\x2a\xbd\x4f\xe2\x6b\x67\xac\x2a\x6f\x98\x65\x46\x39\x9d\x63\x9c\x42\x13\x46\x72\xf6\x90\xc2\xd9\xd6\xda\xca\xf3\x93\x2d\xc0\x6c\x06\x76\x8b\xc0\x5b\x38\xa8\xd5\x3d\xe6\x16\x2a\x66\x0c\x72\xb0\x0a\x72\x25\x29\x46\xe7\xdd\x37\x26\xc2\x04\x2b\xc3\x4a\x32\x0d\xc5\xe1\x20\xa4\x47\xae\xc5\x26\xbb\x37\x01\xd7\x26\x3f\x8e\x28\xe9\xd8\xea\x3a\xf8\xc7\x6e\x85\xc9\xa4\x77\x78\xd5\x8b\x26\xec\x2c\xfa\x10\xe3\xaa\x4a\x69\xfb\x15\x7d\xd9\x0c\x81\xd7\xac\x30\xcf\x42\x3e\x4a\xa9\x2c\xf3\x11\x78\x18\x65\x30\x44\x39\x5d\x0c\xa9\x68\x63\x00\x38\xd4\xfb\xe6\xd3\x10\xd6\x6e\x37\x60\x5f\x1f\x45\x0a\x14\x6a\x93\x78\xc3\x69\x7d\xf0\xb4\xa8\x2b\x3c\xce\x3e\xab\xb4\xb2\xca\xee\x2b\xcc\x58\x1b\xe1\x37\x87\x7a\xef\x93\x69\x94\xea\x8e\x52\xd0\xd4\x09\xb8\x94\x15\xd3\xa4\x48\x57\xb1\x21\x73\x34\x72\x16\x4d\x5b\x98\x46\xeb\xb4\x84\xdb\xbb\x93\x03\x7b\x18\x87\xa3\xaa\x50\xc7\x8e\xbc\x4f\xdd\x1c\x36\x05\xf9\x77\x3e\x8e\x05\x5a\xbc\xa1\x59\x5a\x29\xa6\x79\x9f\x59\xf0\xe7\x49\xa3\xb1\x4d\x74\x4e\xd0\x03\xd0\xcf\x11\xf5\x25\x6a\x8d\xde\xd9\xd9\x43\x16\x56\xc9\x74\xd2\x16\x25\x8c\xc1\x81\x38\x89\xfd\x62\x3e\x9b\x15\x2a\x67\xc5\x56\x19\x3b\xbf\xbc\xb8\xbc\x98\xf1\xc6\xf9\x2c\xf6\xce\xb3\xd6\x18\xc0\xb8\x9c\x46\xd0\x24\x6d\x9c\xbe\x43\x52\x1a\x66\x66\x9d\x49\x61\x8b\x8c\xa3\xa6\x97\x7a\x24\xfa\xa2\xf9\xa7\x89\x2d\xd3\x48\x09\xed\xd0\x67\xb9\xe8\x21\x9e\x06\x5c\x04\x55\xfa\xe5\x4c\x7e\xac\x93\x68\x29\xd9\x8a\x3e\x2f\x34\xd7\x75\xee\x75\xdd\x86\xe4\x8b\xc9\x50\xc9\xd6\x09\x29\x56\x8a\x66\xda\x4e\xd0\xd5\x20\xd3\xf9\xb6\xd5\xc8\xf4\x85\x0d\x3d\xf6\x83\xa6\x58\x0e\x82\x3e\x2e\xdd\x50\xb9\x0d\xda\x63\xb2\xd5\xac\x1f\x02\xc1\x55\x7c\xde\x27\x7a\x43\x09\xbd\xf5\xfb\x8b\x58\xe7\x1a\xfd\x25\x60\xb7\x7a\xa9\x86\x54\xe8\x23\x83\x99\xd2\xff\xc0\x4f\x2c\xab\x57\x96\xef\xfd\xa6\xee\xff\x48\x46\xa9\x03\x1f\x7e\xb6\x8e\x8c\xdf\x6b\xc8\x67\xd8\xee\xf9\x0f\x6b\x1b\xc2\x58\x3e\xe1\x61\x28\x73\xc5\x71\xf9\xfd\xcb\xb5\x2a\x2b\x25\xe9\x42\x93\xd0\xb5\x25\x33\x85\xdb\x88\xf5\xfe\xb3\xd2\x4b\x5d\x74\x2e\x32\x2b\x6c\x81\xd3\x5e\x1e\xdd\x51\x70\x27\x78\x2f\xa9\x53\x7b\xa4\xa2\x96\x38\xad\x49\xd2\x8e\xef\x2d\xfb\xe5\x11\x42\x9e\x73\x18\x25\x9e\x02\xdd\x1d\xe6\x10\xf5\xa2\xe2\xab\x59\x04\xe7\xbe\x96\x4f\xd3\xf7\x6c\xb0\x70\x63\xf3\x9a\x9f\xde\x62\x27\x75\xd8\x01\x34\x6e\xb4\x70\x1a\xdc\xd1\xcf\x9f\x00\x00\x00\xff\xff\x40\xd5\x97\x4f\x27\x0b\x00\x00")

func templates_datasource_gofana_js_bytes() ([]byte, error) {
	return bindata_read(
		_templates_datasource_gofana_js,
		"templates/datasource.gofana.js",
	)
}

func templates_datasource_gofana_js() (*asset, error) {
	bytes, err := templates_datasource_gofana_js_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/datasource.gofana.js", size: 2855, mode: os.FileMode(420), modTime: time.Unix(1421876417, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/config.js": templates_config_js,
	"templates/datasource.gofana.js": templates_datasource_gofana_js,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"templates": &_bintree_t{nil, map[string]*_bintree_t{
		"config.js": &_bintree_t{templates_config_js, map[string]*_bintree_t{
		}},
		"datasource.gofana.js": &_bintree_t{templates_datasource_gofana_js, map[string]*_bintree_t{
		}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

