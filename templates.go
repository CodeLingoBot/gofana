package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _templates_config_js = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x56\x4d\x8f\xdb\x36\x13\xbe\xfb\x57\x0c\x7c\xd1\x6e\xe0\x58\xd9\xf7\xed\x49\x69\x8a\x36\xbb\x45\x10\xa0\xa7\x36\x3d\x14\x8b\xc0\x18\x8b\x94\xc5\x96\x22\x55\x7e\xd4\x36\x16\xfe\xef\x1d\x52\xa4\x44\x1b\x8b\x1e\x8a\x0a\xd8\x95\x3d\x9f\x0f\xe7\xe3\xa1\xeb\x1a\x3e\x7c\x80\x47\xad\x3a\x71\xf0\x06\x9d\xd0\x6a\x45\xb2\x36\x0a\xb6\xbf\x5b\x10\x16\x8e\x3d\x37\x1c\xce\xda\xc3\x51\x48\x09\x9d\x50\x0c\x5c\xcf\xc9\x88\xc4\x9f\x0c\x76\xa8\x30\x79\xa4\x10\x5b\xf8\xd2\x93\x63\x27\x64\xb0\x52\x0e\x85\xb2\x30\xa2\xc1\x81\x3b\x6e\xc8\x19\x5d\xc8\x32\x78\xeb\x60\xcf\xc1\xf2\xf0\xea\xca\x70\xe4\x6d\xbc\x02\x92\xc5\x54\x9d\x30\x64\xea\xc4\xc0\xb7\xab\x15\xe3\x04\x81\xdf\x3d\x57\xe4\xe7\x84\x3a\xd8\xea\xeb\x06\x3a\xaf\xda\x90\xfa\xee\x97\x24\xbc\x87\x97\x15\xc0\xda\x5b\x8a\xef\x8c\x68\xdd\xfa\xfd\x8a\x04\x86\x3b\x6f\x14\x28\x7e\x84\x6c\x79\xf7\x12\x14\xe1\xa9\xdf\xc0\x13\x3a\x04\xab\xbd\x69\xb9\x4d\xd2\x37\x54\xa2\x7f\xf7\xcc\x01\x42\xd4\x14\x14\x90\x8e\x49\xa8\xa8\x86\x1a\x3a\xee\xda\x1e\xa8\x2a\x04\xd0\x6e\x00\x95\xd2\x2e\x56\x30\x7e\x61\x54\x19\xf3\x17\x07\xb4\xc0\xd0\xf6\x7b\x8d\x86\x44\x4e\x1b\x3c\xf0\x39\x34\xbc\x85\xdf\xa8\x35\x2d\x2a\xe8\x91\x8c\x07\x2f\x9d\x18\xa9\xf0\xba\x8b\xa5\xb3\x54\x74\x70\xe7\x91\x2a\x57\xb8\x1c\xa6\x3a\x3f\x7d\x6c\xc0\x19\xcf\x83\x7c\x40\xf3\x07\xf5\xdb\xc5\xa2\x87\xb2\x85\xf7\x3f\xe6\xa5\x46\x20\x65\x5b\x42\xe4\x20\x21\x2f\x9b\x8f\x1c\xf0\x47\xc9\x64\x9e\x8e\x9b\x8a\x0c\x77\xa2\x8b\xb3\x75\x05\xfe\xbe\x4c\xb3\x47\x4b\xe6\xe8\x29\x86\x72\xa2\x8d\xf5\x69\x22\x42\x6f\x24\xd8\x33\xcd\xd7\x09\x7a\xe7\xc6\xa6\xae\x49\x6a\x14\x9d\xb8\x19\xd1\xda\xa3\x36\xec\x7b\xa6\x07\x1a\xbf\x66\xd4\xc6\xe5\xa0\xf5\xd4\xef\x05\xa1\x6d\xe2\xb0\x84\xe7\xe5\x05\x08\xd0\x96\xe6\x70\xec\x85\xe3\xbf\xfe\xfc\x13\x5c\x2e\x49\x77\x48\xc2\xc5\x1a\x62\x65\x1b\xa8\xb2\xaa\xda\xcc\x1a\x02\xd7\xc0\x9a\xe2\xdd\x04\x5b\x67\x93\xcb\x66\xc9\xc9\x15\x9b\xd3\x24\x08\x9f\x55\x27\xfd\xe9\xe9\xe3\x15\x04\x11\x85\x6c\xff\x0a\x84\xac\x7a\x15\xc2\x75\xb0\x75\x61\x92\x0b\x06\x95\xd1\xda\x15\xce\xb9\x82\xb7\x9a\x1b\xd8\x0b\xb6\x96\xd6\x59\x0f\xaf\x20\x7b\x8c\x8a\x65\x07\x8a\x24\x29\xf5\x41\x87\x69\xbc\x45\x5e\xa5\xa6\x4a\xdd\xa2\xec\xb5\x75\xcd\xc3\xff\xfe\xff\x4d\x61\x75\x33\xc5\x37\x08\xe9\xb5\xec\xf5\x27\xa9\xf7\x28\xaf\x69\x0a\xf4\x18\x77\xed\x3f\xdb\xf3\x7a\x4e\x58\x83\x1d\x79\x2b\xba\x73\x9c\x7c\x29\x86\xb4\x57\xc5\x3e\x71\x34\xb4\xfb\x86\x5b\x9a\xf9\x0c\x61\x12\x96\x25\x1c\xf0\xb4\x4b\x36\x0d\x3c\xbc\x7b\xb7\x1c\x71\x49\x95\x17\xab\xd7\x03\x5f\x32\x24\x7d\x52\xee\x8c\xf6\x61\x72\xab\x7a\x36\xa8\x03\x3f\xd7\x49\x4f\x5c\xaf\x55\x55\x46\x0d\xac\x1c\x28\x0a\x25\x6d\x1a\x7d\x60\xc2\xe2\x9e\x78\xc5\x2b\x4b\xab\xca\xa0\xed\x51\x1d\x88\xcf\x8e\x68\x14\xd1\x68\x72\x4c\xda\x5d\xd2\xee\x92\x36\x37\xe8\x26\x7c\xc1\x0a\x81\xdc\xed\x88\x0b\xe7\x8f\x12\xcf\x52\x10\xed\x77\x1c\x89\xb3\xf9\xe2\xfa\xe3\x09\x07\x22\x09\x1a\xed\x87\x61\xbd\xa1\xff\xfd\x3a\x29\xb3\xcf\x2e\x47\x4b\x36\x45\xde\xcf\x13\xdd\x1c\x51\xc5\xe3\xe5\x36\xe5\x69\xcf\x17\x11\x9d\x82\x60\x6f\x28\x22\xc7\x70\x85\x24\x33\x11\x6e\x2a\xa9\x8f\x4b\xbc\x2f\x01\xaa\x37\xa3\xb6\x89\x72\x85\x5d\x82\xd1\x67\x62\x74\x3a\x6b\xeb\x8d\x70\xe7\x0d\xec\xfd\x94\xd5\xe9\x91\x08\x70\x88\x37\x81\xa1\x9b\xd2\xe8\x01\xb0\x6d\x05\x23\x8a\x43\x29\xcf\x53\x75\x09\xc1\xd2\xcf\x3c\x23\xc8\x06\xe2\xb3\x62\x44\x8a\x45\xad\x5e\x1b\x8f\xc7\xd8\x0a\xba\xbc\x15\xd3\x47\xaa\xb3\xa3\x26\x8e\x86\x2e\xd1\xd3\x94\xb7\xca\x97\xee\x5b\xf8\x76\x99\xcf\x68\xf7\x5d\x0e\x38\x39\xef\xa2\x70\x37\x39\x37\xa5\xe3\xd5\xe4\xfc\xc0\x58\xa8\xb1\x01\x7d\x54\x89\x15\x08\xa4\xe2\xd2\xce\x6d\xf2\x74\x36\x5b\x1e\x82\xdc\x62\xb3\xa9\x84\x93\xf6\xda\x03\xd2\xd7\x06\x9e\xbf\x6e\x4a\x27\xc3\xff\xf4\xc2\x70\xfa\xa5\x32\x68\xe6\x25\xcd\x63\x70\x9d\xe2\xd3\x28\x49\x96\x7e\x6f\x80\xed\xb5\x97\xa1\xbd\x20\x35\x32\xce\xca\x20\x61\xe4\xf8\x34\x54\x19\x6f\x71\x39\xcc\x96\x8c\x8f\x44\x78\x5c\xb5\x22\xdc\x18\xcf\xeb\xc5\x66\x3b\x11\xd8\x7a\xc6\x76\x99\xca\x71\xb9\x7f\xbf\x0a\x7f\x7f\x07\x00\x00\xff\xff\x8b\xaf\x91\xec\x67\x09\x00\x00")

func templates_config_js_bytes() ([]byte, error) {
	return bindata_read(
		_templates_config_js,
		"templates/config.js",
	)
}

func templates_config_js() (*asset, error) {
	bytes, err := templates_config_js_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/config.js", size: 2407, mode: os.FileMode(420), modTime: time.Unix(1421952601, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templates_datasource_gofana_js = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x56\x4d\x6b\xdb\x4c\x10\xbe\xfb\x57\x0c\x22\x20\x89\x08\xf9\x1e\x13\x5e\xde\x26\x14\x7a\xe8\xa1\x1f\x3e\x85\x50\xd6\xda\x91\xbd\xa9\xb4\xab\xec\x87\xc1\x84\xfc\xf7\xce\xae\xac\xcf\x24\xe0\x36\x4d\xaa\x83\x91\x76\x9f\x99\x79\x66\x9e\x99\xf5\x72\x2c\x85\xc4\xe4\x66\x01\x10\x33\xb9\x75\x15\xd3\x71\xe6\x3f\x2a\xc5\x99\xd9\xb5\xef\x3f\x37\xb2\x7d\xa9\x55\x8d\xd2\xc6\x8b\xdb\x6c\x51\x3a\x59\x58\xa1\x24\x24\x47\xb3\x0c\x7e\x64\x40\xc8\x14\x1e\x3c\xd4\x19\x04\x63\xb5\x28\x6c\xbc\x5a\xd0\xc2\x9e\x69\xa8\x15\x77\x15\xc2\x25\x1c\x4d\xf2\x76\x21\x89\xb7\x9a\x95\x4c\xb2\xdc\xa0\xde\x8b\x02\x4d\x9c\x06\x9b\x76\x3b\x2f\x59\x61\x95\x3e\x24\xf1\x95\x33\x56\xd5\xd7\xcc\x32\xa3\x9c\x2e\x30\xce\xa0\xa3\x91\x9c\xdd\x67\x70\xb6\xb3\xb6\xf1\xf1\xc9\x16\x60\xb9\x04\xbb\x43\xe0\x3d\x1c\xd4\xe6\x0e\x0b\x0b\x0d\x33\x06\x39\x58\x05\x85\x92\xc4\xd1\x79\xf7\x9d\x89\x30\xc1\xca\xb0\x9a\x4c\x43\x71\x38\x08\xe9\x91\xa5\xd8\xe6\x77\x26\xe0\xfa\xe4\xe7\x8c\x92\x21\x5a\x5b\x07\xff\xd8\x9d\x30\xb9\xf4\x0e\x2f\x47\x6c\xc2\xca\x6a\x0c\x31\xae\x69\x94\xb6\x9f\xd1\x97\xcd\x10\xb8\x64\x95\x79\x16\xf2\xbf\x94\xca\x32\xcf\xc0\xc3\x28\x83\x29\xca\xe9\x6a\x1a\x8a\x16\x26\x80\x63\xbd\xaf\x3f\x4c\x61\xfd\x72\x07\xf6\xf5\x51\xa4\x40\xa5\xb6\x89\x37\x4c\xdb\x8d\xc7\x55\x5b\xe1\x79\xf6\x79\xa3\x95\x55\xf6\xd0\x60\xce\x7a\x86\x5f\x1c\xea\x83\x4f\xa6\x53\x6a\xd8\xca\x40\x53\x27\xe0\x5a\x36\x4c\x93\x22\x43\xc5\xa6\x91\xa3\x99\xb3\x28\xed\x61\x1a\xad\xd3\x12\x6e\x6e\x4f\x26\x76\x3f\xa7\xa3\x9a\x50\xc7\x21\xf8\x38\x74\xb7\xd9\x15\xe4\xf7\xe3\x71\xac\xd0\xe2\x35\xcd\xd2\x46\x31\xcd\xc7\x91\x05\x7f\x3e\x68\x34\xb7\x89\xce\x09\x7a\x04\xfa\x39\xa2\xbe\x44\xad\xd1\x3b\x3b\xbb\xcf\xc3\x57\x92\x2e\xfa\xa2\x84\x31\x38\x06\x4e\xe2\x25\xef\xfc\x2c\x63\xef\x27\xef\x71\x00\xc6\x15\x34\x6d\x26\xe9\x29\xf9\x66\xc8\x68\x6e\x99\x75\x26\x83\x1d\x32\x8e\x9a\x5e\xda\xee\x1f\xeb\xe3\x9f\x8e\x46\xae\x91\xb8\xef\xd1\x27\xb4\x1a\x21\x1e\x27\xb1\x08\xaa\xf4\xeb\x23\xf9\x09\x4e\xa2\xb5\x64\x1b\x3a\x49\x68\x84\xdb\x34\xdb\x12\x4d\x83\xaf\x16\x53\xd1\x7a\x27\x24\x4e\x2d\xba\xc1\x3a\x41\x42\x83\x4c\x17\xbb\x5e\x0e\x33\xd6\x30\xb4\xd3\x37\x1a\x58\x39\x21\xfd\xb2\x4a\x53\x91\xb6\x68\x49\xa1\x36\xc0\x7f\xc1\xd7\x65\x7c\x3e\xf6\xf9\x86\x6a\x79\xeb\xf7\xd7\xab\xcd\x35\x7a\xa2\xd5\xf0\xf5\x5a\xb9\xa8\xa6\x2f\x8c\x5b\x46\xa7\xfb\x77\xac\x9b\x3f\x57\xea\xfd\x66\xe9\xdf\xa8\x43\x59\x02\x9f\x9e\x3b\x2f\x0c\xd5\xdf\x50\xca\xb0\xfd\xf3\x27\x63\x4f\x61\xae\x94\xf0\x30\x94\x85\xe2\xb8\xfe\xfa\xe9\x4a\xd5\x8d\x92\x74\x23\x49\xe8\xde\x91\x9b\xca\x6d\x45\x79\xf8\xa8\xf4\x5a\x57\x83\x8b\xdc\x0a\x5b\x61\x3a\xca\x63\xd8\x0a\xee\x04\x1f\x25\x75\x6a\x3b\x34\xca\x3c\xed\x87\x6c\x70\xfd\x96\xad\xf1\x00\x21\xa5\x0b\x98\xe5\x98\x01\xfd\xcf\x5f\x40\x34\x62\xc5\x37\xcb\x08\xce\x7d\xd9\x1e\xd3\xf7\xec\xa5\x70\xbb\xf2\xf2\x9e\xde\x4d\x27\x35\xd3\x11\x34\xef\xa9\xb0\x1b\xdc\xd1\xcf\xaf\x00\x00\x00\xff\xff\x3f\x98\xe7\x2b\xd3\x0a\x00\x00")

func templates_datasource_gofana_js_bytes() ([]byte, error) {
	return bindata_read(
		_templates_datasource_gofana_js,
		"templates/datasource.gofana.js",
	)
}

func templates_datasource_gofana_js() (*asset, error) {
	bytes, err := templates_datasource_gofana_js_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/datasource.gofana.js", size: 2771, mode: os.FileMode(420), modTime: time.Unix(1421957735, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/config.js": templates_config_js,
	"templates/datasource.gofana.js": templates_datasource_gofana_js,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"templates": &_bintree_t{nil, map[string]*_bintree_t{
		"config.js": &_bintree_t{templates_config_js, map[string]*_bintree_t{
		}},
		"datasource.gofana.js": &_bintree_t{templates_datasource_gofana_js, map[string]*_bintree_t{
		}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

