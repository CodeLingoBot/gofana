package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _templates_config_js = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x56\xdb\x8e\xdb\x36\x10\x7d\xf7\x57\x0c\xfc\xe2\x4d\xe0\xac\x92\x57\xa5\x29\xda\xec\x16\x41\x80\x02\x2d\x9a\xed\x43\xb1\x08\x0c\x5a\xa4\x2c\xb6\x14\xa9\xf2\x52\xdb\x58\xf8\xdf\x7b\x48\x51\x17\x5f\xd0\x02\x45\x0d\xec\xca\x9e\xcb\x99\xe1\x99\xe1\x8c\x8a\x82\x3e\x7c\xa0\x07\xa3\x6b\xb9\x0b\x96\x79\x69\xf4\x02\xb2\x2a\x09\xee\x7f\x77\x24\x1d\xed\x1b\x61\x05\x1d\x4d\xa0\xbd\x54\x8a\x6a\xa9\x39\xf9\x46\xc0\x08\xe2\x4f\x96\xd5\x4c\xb3\xec\x91\x21\xee\xe9\xa9\x81\x63\x2d\x55\xb4\xd2\x9e\x49\xed\xa8\x63\x96\xb5\xc2\x0b\x0b\x67\xe6\x63\x94\x36\x38\x4f\x5b\x41\x4e\xc4\x47\x3d\x87\x83\xb7\x0d\x9a\x20\x4b\xa1\x6a\x69\x61\xea\x65\x2b\xee\x17\x0b\x2e\x90\x82\xb8\x7b\x5e\xc1\xcf\x4b\xbd\x73\xab\xaf\x6b\xaa\x83\xae\x62\xe8\xbb\x2f\x59\xf8\x8a\x5e\x16\x44\xcb\xe0\x80\xef\xad\xac\xfc\xf2\xfd\x02\x02\x2b\x7c\xb0\x9a\xb4\xd8\xd3\x60\x79\xf7\x12\x15\xf1\x53\xbc\xa6\x47\xe6\x19\x39\x13\x6c\x25\x5c\x96\xbe\x06\x45\xff\xed\x33\x02\x44\xd4\x0c\x4a\x0c\xc7\x44\x56\xe0\xd0\x50\x2d\x7c\xd5\x10\x58\x41\x82\x6e\x4d\x4c\x6b\xe3\x13\x83\xe9\x07\x07\x33\xf6\x2f\x41\xcc\x11\x67\xae\xd9\x1a\x66\x21\xf2\xc6\xb2\x9d\x18\xa1\xe9\x0d\xfd\x86\xd2\x54\x4c\x53\xc3\x60\xdc\x06\xe5\x65\x07\xe2\x4d\x9d\xa8\x73\x20\x9d\xfc\xb1\x03\x73\x33\x97\x5d\xcf\xf3\xe3\xc7\x92\xbc\x0d\x22\xca\x5b\x66\xff\x40\xbd\x7d\x22\x3d\xd2\x16\x9f\xff\x18\x17\x85\x60\x88\x36\x41\x0c\x20\x31\x2e\x1f\x8f\x1c\xf3\x4f\x92\xde\x3c\x1f\x37\x93\x4c\x77\xb2\x4e\xbd\x75\x96\xfc\xab\x79\x98\x2d\x73\x30\x67\x01\x18\xda\xcb\x2a\xf1\x53\xa6\x0c\x83\x55\xe4\x8e\xe8\xaf\x03\x35\xde\x77\x65\x51\x40\x6a\x35\x4e\x5c\x76\xcc\xb9\xbd\xb1\xfc\x3b\x6e\x5a\xb4\x5f\xd9\x19\xeb\x07\xd0\xa2\xaf\xf7\x94\xa1\x2b\x53\xb3\xc4\xcf\xcb\x0b\x21\xa1\x7b\xf4\x61\xd7\x48\x2f\x7e\xfd\xe5\x47\x3a\x9d\xb2\x6e\x97\x85\x93\x35\x25\x66\x4b\x5a\x0d\xaa\xd5\x7a\xd4\x20\x39\x28\x8a\x2b\xcd\x69\x3d\x85\x12\x9a\x8f\xe8\x39\xf2\x67\x5d\xab\x70\x78\xfc\x78\x16\x59\x26\x21\xdf\xde\x88\x3c\xa8\xae\x23\xdf\xd0\x5c\xc6\x00\x5b\x53\x10\xa2\x91\x3d\x5a\xc1\xf2\xd2\xec\x1c\x67\x9e\xfa\x15\xf0\xcf\x60\x7f\x0e\x3c\x54\xe3\x02\x38\x9b\x5d\x01\x4f\xae\xff\x42\xd6\x4f\x9d\xd0\x4f\x5f\x90\x21\x1a\x61\xd4\x19\x08\xbd\xbb\x49\xd6\xa0\xba\x26\xeb\x4a\x73\x11\x79\x82\xaf\x30\xb5\x4c\x7b\x03\xfc\x21\x29\xa6\xab\x3e\x0b\x92\x49\xdd\x99\x78\xe9\x66\xf2\x8b\x6b\x78\x11\x1b\x8f\x69\x30\x7d\x52\x66\xcb\xd4\xf9\x9c\xc5\x51\xd3\xb0\xf8\xdf\x06\x55\x31\x06\x2c\xc8\x75\xa2\x92\xf5\x31\x5d\x5d\x25\xdb\x3c\x18\x66\x03\x41\x30\x8b\xe1\x65\x85\xc3\xa5\x1d\x52\xe8\x85\x73\x72\x5a\x76\xd8\x64\x9b\x92\xde\xbd\x7d\x3b\x1d\x71\x0a\x35\x4c\x86\xc6\xb4\x62\x8a\x90\xf5\x59\xb9\xb1\x26\xc4\xab\xb7\x2a\x46\x83\x22\x2e\x98\x22\xeb\xb1\xac\x8c\x5e\xcd\x51\xe3\x5a\x89\x33\x96\x29\x8c\x0a\x7c\xe1\xd2\xb1\x2d\x06\x63\xd0\x0e\xb3\x86\x53\xd5\x30\xbd\xc3\x40\xde\x33\xab\xb1\x07\xb2\x63\xd6\x6e\xb2\x76\x93\xb5\x43\x81\x2e\xe0\x67\x63\x2d\x6e\x27\xd7\xb1\x69\x69\x75\x8a\x1d\x95\xc4\xde\xaa\x05\xc3\xd2\x11\x93\xeb\x0f\x07\xd6\x62\xca\x95\xb4\x7c\xd7\x2e\xd7\xf8\xdf\x2c\xb3\x72\xf0\xd9\x0c\x68\xd9\x66\x16\xf7\x73\x3f\x2f\xf7\x4c\xa7\xe3\x0d\x65\x1a\xae\xd8\xb0\x49\x71\x0a\xa4\xbd\x06\xa2\x60\x71\x07\x66\x33\x19\x57\xad\x32\xfb\x09\xef\x29\xa6\x1a\x6c\x67\x5c\xde\x19\xd2\x4d\x60\xf8\x8e\x95\x84\xb3\x56\xc1\x4a\x7f\x5c\xd3\x36\xf4\x51\xbd\xe9\x30\xc1\xdb\xb4\xca\x2c\x56\xbd\x35\x2d\xb1\xaa\x92\x1c\xd7\x88\x29\x75\xec\xd9\x45\x06\x53\x3d\x87\x1e\x61\xbc\xc5\x40\x9e\xb5\xc8\x6c\x3a\xac\x6e\xb5\xc7\x43\x2a\x05\xde\x3e\x34\x37\x7b\xf0\xec\x51\xc4\xce\xe2\x2d\xe0\xd0\xc7\x5d\x0d\x6f\x0d\x6f\xe8\x9b\xa9\x3f\x93\xdd\xb7\x03\x60\xef\xbc\x49\xc2\x4d\xef\x5c\xce\x1d\xcf\x3a\xe7\x7b\xce\x23\xc7\x96\xcc\x5e\xe7\xfb\x8e\x24\xb5\x50\x6e\x2c\x53\xc0\xd9\xdc\xfc\x10\x70\x4b\xc5\x06\x85\xbd\xf6\xdc\x83\xf2\xcf\x92\x9e\xbf\xae\xe7\x4e\x56\xfc\x19\xa4\x15\x78\xd5\x6a\x0d\x0f\x0a\xfd\x18\x5d\x7b\x7c\xb4\x92\xe2\xf9\x85\x89\x5c\x63\x82\x8a\xe5\x25\x65\x18\x17\x7c\x0e\x12\x5b\x4e\xf4\x4d\x35\xe4\x3b\xdb\x6e\xa3\x25\x17\x98\x72\xa8\x50\x25\xe3\xca\x7b\x5e\x4e\x36\xf7\xfd\x68\x5a\x8e\xb9\x9d\x7a\x3a\x4e\xaf\xde\x2f\xe2\xdf\xdf\x01\x00\x00\xff\xff\x19\x51\xc4\xaa\x28\x0a\x00\x00")

func templates_config_js_bytes() ([]byte, error) {
	return bindata_read(
		_templates_config_js,
		"templates/config.js",
	)
}

func templates_config_js() (*asset, error) {
	bytes, err := templates_config_js_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/config.js", size: 2600, mode: os.FileMode(420), modTime: time.Unix(1422915677, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templates_datasource_gofana_js = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x56\x4d\x6b\xdb\x4c\x10\xbe\xfb\x57\x0c\x22\x20\x89\x08\xf9\x1e\x13\x5e\xde\x26\x14\x7a\xe8\xa1\x1f\x3e\x85\x50\xd6\xda\x91\xbd\xa9\xb4\xab\xec\x87\xc1\x84\xfc\xf7\xce\xae\xac\xcf\x24\xe0\x36\x4d\xaa\x83\x91\x76\x9f\x99\x79\x66\x9e\x99\xf5\x72\x2c\x85\xc4\xe4\x66\x01\x10\x33\xb9\x75\x15\xd3\x71\xe6\x3f\x2a\xc5\x99\xd9\xb5\xef\x3f\x37\xb2\x7d\xa9\x55\x8d\xd2\xc6\x8b\xdb\x6c\x51\x3a\x59\x58\xa1\x24\x24\x47\xb3\x0c\x7e\x64\x40\xc8\x14\x1e\x3c\xd4\x19\x04\x63\xb5\x28\x6c\xbc\x5a\xd0\xc2\x9e\x69\xa8\x15\x77\x15\xc2\x25\x1c\x4d\xf2\x76\x21\x89\xb7\x9a\x95\x4c\xb2\xdc\xa0\xde\x8b\x02\x4d\x9c\x06\x9b\x76\x3b\x2f\x59\x61\x95\x3e\x24\xf1\x95\x33\x56\xd5\xd7\xcc\x32\xa3\x9c\x2e\x30\xce\xa0\xa3\x91\x9c\xdd\x67\x70\xb6\xb3\xb6\xf1\xf1\xc9\x16\x60\xb9\x04\xbb\x43\xe0\x3d\x1c\xd4\xe6\x0e\x0b\x0b\x0d\x33\x06\x39\x58\x05\x85\x92\xc4\xd1\x79\xf7\x9d\x89\x30\xc1\xca\xb0\x9a\x4c\x43\x71\x38\x08\xe9\x91\xa5\xd8\xe6\x77\x26\xe0\xfa\xe4\xe7\x8c\x92\x21\x5a\x5b\x07\xff\xd8\x9d\x30\xb9\xf4\x0e\x2f\x47\x6c\xc2\xca\x6a\x0c\x31\xae\x69\x94\xb6\x9f\xd1\x97\xcd\x10\xb8\x64\x95\x79\x16\xf2\xbf\x94\xca\x32\xcf\xc0\xc3\x28\x83\x29\xca\xe9\x6a\x1a\x8a\x16\x26\x80\x63\xbd\xaf\x3f\x4c\x61\xfd\x72\x07\xf6\xf5\x51\xa4\x40\xa5\xb6\x89\x37\x4c\xdb\x8d\xc7\x55\x5b\xe1\x79\xf6\x79\xa3\x95\x55\xf6\xd0\x60\xce\x7a\x86\x5f\x1c\xea\x83\x4f\xa6\x53\x6a\xd8\xca\x40\x53\x27\xe0\x5a\x36\x4c\x93\x22\x43\xc5\xa6\x91\xa3\x99\xb3\x28\xed\x61\x1a\xad\xd3\x12\x6e\x6e\x4f\x26\x76\x3f\xa7\xa3\x9a\x50\xc7\x21\xf8\x38\x74\xb7\xd9\x15\xe4\xf7\xe3\x71\xac\xd0\xe2\x35\xcd\xd2\x46\x31\xcd\xc7\x91\x05\x7f\x3e\x68\x34\xb7\x89\xce\x09\x7a\x04\xfa\x39\xa2\xbe\x44\xad\xd1\x3b\x3b\xbb\xcf\xc3\x57\x92\x2e\xfa\xa2\x84\x31\x38\x06\x4e\xe2\x25\xef\xfc\x2c\x63\xef\x27\xef\x71\x00\xc6\x15\x34\x6d\x26\xe9\x29\xf9\x66\xc8\x68\x6e\x99\x75\x26\x83\x1d\x32\x8e\x9a\x5e\xda\xee\x1f\xeb\xe3\x9f\x8e\x46\xae\x91\xb8\xef\xd1\x27\xb4\x1a\x21\x1e\x27\xb1\x08\xaa\xf4\xeb\x23\xf9\x09\x4e\xa2\xb5\x64\x1b\x3a\x49\x68\x84\xdb\x34\xdb\x12\x4d\x83\xaf\x16\x53\xd1\x7a\x27\x24\x4e\x2d\xba\xc1\x3a\x41\x42\x83\x4c\x17\xbb\x5e\x0e\x33\xd6\x30\xb4\xd3\x37\x1a\x58\x39\x21\xfd\xb2\x4a\x53\x91\xb6\x68\x49\xa1\x36\xc0\x7f\xc1\xd7\x65\x7c\x3e\xf6\xf9\x86\x6a\x79\xeb\xf7\xd7\xab\xcd\x35\x7a\xa2\xd5\xf0\xf5\x5a\xb9\xa8\xa6\x2f\x8c\x5b\x46\xa7\xfb\x77\xac\x9b\x3f\x57\xea\xfd\x66\xe9\xdf\xa8\x43\x59\x02\x9f\x9e\x3b\x2f\x0c\xd5\xdf\x50\xca\xb0\xfd\xf3\x27\x63\x4f\x61\xae\x94\xf0\x30\x94\x85\xe2\xb8\xfe\xfa\xe9\x4a\xd5\x8d\x92\x74\x23\x49\xe8\xde\x91\x9b\xca\x6d\x45\x79\xf8\xa8\xf4\x5a\x57\x83\x8b\xdc\x0a\x5b\x61\x3a\xca\x63\xd8\x0a\xee\x04\x1f\x25\x75\x6a\x3b\x34\xca\x3c\xed\x87\x6c\x70\xfd\x96\xad\xf1\x00\x21\xa5\x0b\x98\xe5\x98\x01\xfd\xcf\x5f\x40\x34\x62\xc5\x37\xcb\x08\xce\x7d\xd9\x1e\xd3\xf7\xec\xa5\x70\xbb\xf2\xf2\x9e\xde\x4d\x27\x35\xd3\x11\x34\xef\xa9\xb0\x1b\xdc\xd1\xcf\xaf\x00\x00\x00\xff\xff\x3f\x98\xe7\x2b\xd3\x0a\x00\x00")

func templates_datasource_gofana_js_bytes() ([]byte, error) {
	return bindata_read(
		_templates_datasource_gofana_js,
		"templates/datasource.gofana.js",
	)
}

func templates_datasource_gofana_js() (*asset, error) {
	bytes, err := templates_datasource_gofana_js_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/datasource.gofana.js", size: 2771, mode: os.FileMode(420), modTime: time.Unix(1421957735, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templates_signin_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x92\xcb\xce\xdb\x20\x10\x85\xf7\x79\x8a\x11\x52\x97\x36\xf9\xb3\x74\x6c\xef\xaa\xaa\xeb\x3c\x01\x81\x31\x46\xe2\x62\xc1\x24\x69\x6a\xe5\xdd\x0b\xd8\x6a\xad\xb2\xf1\xe5\x7c\x33\x67\xe6\x88\x7e\x26\x67\xc7\x53\x3f\xa3\x50\xf9\x91\xe8\x6d\x71\x3c\x41\x3e\x45\x80\xb5\xbe\x96\x33\x05\x4f\xcd\x24\x9c\xb1\xef\x0e\x92\xf0\xa9\x49\x18\xcd\x74\xad\xc0\x67\xab\xf8\xfa\x9f\x4f\xe6\x37\x76\xe0\x50\x99\x87\x3b\x92\xf7\xa0\xde\x07\x96\xf0\x17\x35\xc2\x1a\xed\x3b\x90\xe8\x09\xe3\xf5\xaf\xe6\x44\xd4\xc6\x37\x14\x96\x0e\x2e\xe7\x6f\xc7\x2e\x2d\xc6\x18\x22\xac\x20\x83\x0d\xb1\x83\x88\xea\x7a\xf4\xbd\x1b\x9d\xc9\x9e\xef\x4b\xf5\x7c\x5f\xb2\xb8\x8f\xa7\xbc\xf3\xd7\xb6\xe9\x0d\x2d\x4a\x02\x01\x4b\x0c\x4f\xa3\x30\x76\x85\xcd\xe2\xba\x82\x99\xa0\xfd\x5e\x6d\x3e\xb9\xd5\x02\xd2\x8a\x94\x06\x56\x9d\x59\x25\x0e\x32\x5f\xea\x1f\xf4\xaa\x7c\xee\xd5\x3f\x42\xd0\x16\xab\xae\xcc\x73\x73\xec\x05\xcc\x11\xa7\x81\x71\x5d\x55\x2e\x1e\x34\xb3\xb1\x37\x4e\xc3\xcb\x28\x9a\x07\x76\x39\x9f\x19\xa4\x28\x07\x36\x13\x2d\xa9\xe3\x5c\xe1\x13\x6d\x58\x30\xa6\x76\xab\x6a\x65\x70\x5c\x48\x19\x1e\x9e\x12\x37\x4e\x68\x4c\x3c\xe5\x14\x9b\x1c\xd8\xcb\xd0\xdc\xec\xdc\xe2\x35\x03\x61\x69\x60\xb7\xa2\xfe\xf4\x50\x54\xd8\x26\xcb\xb6\x5c\x94\x74\xea\x74\xff\xc6\xef\xf9\x96\x53\x8e\xa2\x5c\x91\x3f\x01\x00\x00\xff\xff\x1c\x7d\x03\x12\x29\x02\x00\x00")

func templates_signin_html_bytes() ([]byte, error) {
	return bindata_read(
		_templates_signin_html,
		"templates/signin.html",
	)
}

func templates_signin_html() (*asset, error) {
	bytes, err := templates_signin_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/signin.html", size: 553, mode: os.FileMode(420), modTime: time.Unix(1422661748, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/config.js": templates_config_js,
	"templates/datasource.gofana.js": templates_datasource_gofana_js,
	"templates/signin.html": templates_signin_html,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"templates": &_bintree_t{nil, map[string]*_bintree_t{
		"config.js": &_bintree_t{templates_config_js, map[string]*_bintree_t{
		}},
		"datasource.gofana.js": &_bintree_t{templates_datasource_gofana_js, map[string]*_bintree_t{
		}},
		"signin.html": &_bintree_t{templates_signin_html, map[string]*_bintree_t{
		}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

