package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _templates_config_js = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x56\x4b\x8f\xdb\x36\x10\xbe\xfb\x57\x0c\x7c\xf1\x6e\xe0\x58\xc9\x55\x69\x8a\x36\xbb\x45\x10\xa0\xa7\x36\x3d\x14\x8b\x85\x31\x16\x29\x8b\x2d\x45\xaa\x7c\x54\x36\x16\xfe\xef\x1d\x52\xa4\x44\xbb\x8b\x1e\x8a\x08\xd8\x95\x3d\x8f\x6f\x86\xdf\x3c\xe8\xaa\x82\x8f\x1f\xe1\x41\xab\x56\x1c\xbd\x41\x27\xb4\x5a\x91\xac\x89\x82\xdd\x1f\x16\x84\x85\xb1\xe3\x86\xc3\x59\x7b\x18\x85\x94\xd0\x0a\xc5\xc0\x75\x9c\x8c\x48\xfc\xd9\x60\x8b\x0a\x93\x47\x82\xd8\xc1\xd7\x8e\x1c\x5b\x21\x83\x95\x72\x28\x94\x85\x01\x0d\xf6\xdc\x71\x43\xce\xe8\x42\x94\xde\x5b\x07\x07\x0e\x96\x87\x57\x5b\xc2\x91\xb7\xf1\x0a\x48\x16\x43\xb5\xc2\x90\xa9\x13\x3d\xdf\xad\x56\x8c\x53\x0a\xfc\xee\x69\x43\x7e\x4e\xa8\xa3\xdd\x3c\x6f\xa1\xf5\xaa\x09\xa1\xef\x7e\x4d\xc2\x7b\x78\x59\x01\xac\xbd\x25\x7c\x67\x44\xe3\xd6\x1f\x56\x24\x30\xdc\x79\xa3\x40\xf1\x11\xb2\xe5\xdd\x4b\x50\x84\xa7\x7a\x03\x8f\xe8\x10\xac\xf6\xa6\xe1\x36\x49\xdf\x10\x45\xff\xef\x99\x01\x02\x6a\x02\x05\xa4\x63\x52\x56\xc4\xa1\x86\x96\xbb\xa6\x03\x62\x85\x12\xb4\x5b\x40\xa5\xb4\x8b\x0c\xc6\x2f\x8c\x98\x31\x7f\x73\x40\x0b\x0c\x6d\x77\xd0\x68\x48\xe4\xb4\xc1\x23\x9f\xa1\xe1\x2d\xfc\x4e\xa5\x69\x50\x41\x87\x64\xdc\x7b\xe9\xc4\x40\xc4\xeb\x36\x52\x67\x89\x74\x70\xe7\x81\x98\x2b\x5c\x8e\x13\xcf\x8f\x9f\x6a\x70\xc6\xf3\x20\xef\xd1\xfc\x49\xf5\x76\x91\xf4\x40\x5b\x78\xff\x67\x5c\x2a\x04\x52\xb4\x05\x22\x83\x84\xb8\x6c\x3e\x72\xc8\x3f\x4a\x26\xf3\x74\xdc\x44\x32\xdc\x89\x36\xf6\xd6\x55\xf2\xf7\x65\x98\x03\x5a\x32\x47\x4f\x18\xca\x89\x26\xf2\x53\xc7\x0c\xbd\x91\x60\xcf\xd4\x5f\x27\xe8\x9c\x1b\xea\xaa\x22\xa9\x51\x74\xe2\x7a\x40\x6b\x47\x6d\xd8\x0f\x4c\xf7\xd4\x7e\xf5\xa0\x8d\xcb\xa0\xd5\x54\xef\x25\x43\x5b\xc7\x66\x09\xcf\xcb\x0b\x50\x42\x3b\xea\xc3\xa1\x13\x8e\xff\xf6\xcb\xcf\x70\xb9\x24\xdd\x31\x09\x17\x6b\x88\xcc\xd6\xb0\xc9\xaa\xcd\x76\xd6\x50\x72\x35\xac\xab\xac\x59\x67\xcd\x65\xbb\x84\xe2\x8a\xcd\xe8\x29\xf2\x17\xd5\x4a\x7f\x7a\xfc\x74\x15\x59\x44\x21\x3b\xbc\x12\x39\xab\xfe\x15\x99\xf0\x6e\xc0\xd6\x85\x49\xe6\x09\x36\x46\x6b\x57\x38\x67\xe2\x6e\x35\x37\x69\x2f\xb9\x35\x34\xc5\xba\x7f\x25\xb3\x87\xa8\x58\x5a\xbf\x08\x92\x42\x1f\x75\x68\xc2\x42\x7e\xd3\x96\x37\xb1\xe9\xb5\x0c\xea\x67\xa9\x0f\x28\xaf\xf7\x0e\xe8\x21\x0e\xcf\x37\x1b\xdc\x6a\x0e\x58\x81\x1d\x78\x23\xda\x73\x6c\x65\x29\xfa\x34\x28\xc5\x80\x70\x34\x34\xcc\x86\x5b\x6a\xe2\x9c\xc2\x24\x2c\xc9\xe9\xf1\xb4\x4f\x36\x35\xbc\x7f\xf7\x6e\x39\xe2\x12\x2a\x4f\x4a\xa7\x7b\xbe\x44\x48\xfa\xa4\xdc\x1b\xed\x43\x2b\x6e\xaa\xd9\xa0\x0a\x0b\xb7\x4a\x7a\x5a\xde\x5a\x6d\x4a\xd4\xb0\x66\xc3\xce\x41\x49\xa3\x43\x1f\x98\xb0\x78\xa0\x45\xe1\x95\xa5\xd9\x63\xd0\x74\xa8\x8e\xb4\xa0\x46\x34\x8a\xf6\x62\x72\x4c\xda\x7d\xd2\xee\x93\x36\x17\xe8\x06\xbe\x18\xf3\xb0\xad\xed\x80\xcb\x12\x1f\x24\x9e\xa5\xa0\x3d\xde\x72\xa4\x25\xcc\x17\xd7\x9f\x4e\xd8\xd3\xd4\x53\xd3\xbe\xef\xd7\x5b\xfa\xdf\xad\x93\x32\xfb\xec\x33\x5a\xb2\x29\xe2\x7e\x99\xf6\xc7\x88\x2a\x1e\x2f\x97\x29\xf7\x71\xbe\x59\xe8\x14\x94\xf6\x96\x10\x39\x86\x3b\x21\x99\x89\x70\xf5\x48\x3d\x2e\x78\x5f\x43\xaa\xde\x0c\xda\xa6\x1d\x2a\xec\x02\x46\x9f\x69\x45\xd3\x59\x1b\x6f\x84\x3b\x6f\xe1\xe0\xa7\xa8\x4e\x0f\xb4\xd1\xfa\xb8\xda\x0d\x5d\x7d\x46\xf7\x80\x4d\x23\x18\xed\x2c\x94\xf2\x3c\xb1\x4b\x19\x2c\xf5\xcc\x3d\x82\xac\xa7\x05\x55\xb4\x48\x31\x82\x9b\xd7\xda\xe3\x21\x96\x82\x6e\x63\xc5\xf4\x48\x3c\x3b\x2a\xe2\x60\xe8\x56\x3c\x4d\x71\x37\xf9\x16\x7d\x0b\xdf\x2d\xfd\x19\xed\xbe\xcf\x80\x93\xf3\x3e\x0a\xf7\x93\x73\x5d\x3a\x5e\x75\xce\x8f\x8c\x05\x8e\x0d\xe8\x51\xa5\x79\xa7\x24\x15\x97\x76\x2e\x93\xa7\xb3\xd9\xf2\x10\xe4\x16\x8b\x4d\x14\x4e\xda\x6b\x0f\x48\x5f\x6b\x78\x7a\xde\x96\x4e\x86\xff\xe5\x85\xe1\xf4\xd3\xa3\xd7\xcc\x4b\xea\xc7\xe0\x3a\xe1\x53\x2b\x49\x96\x7e\x40\x80\xed\xb4\x97\xa1\xbc\x20\x35\x32\xce\x4a\x90\xd0\x72\x7c\x6a\xaa\x9c\x6f\xb1\xed\x67\x4b\xc6\x07\x5a\x65\x5c\x35\x22\x5c\x01\x4f\xeb\xc5\x66\x37\xad\xa6\xf5\x9c\xdb\x65\xa2\xe3\x72\xff\x61\x15\xfe\xfe\x09\x00\x00\xff\xff\x11\xda\x14\xd3\x38\x09\x00\x00")

func templates_config_js_bytes() ([]byte, error) {
	return bindata_read(
		_templates_config_js,
		"templates/config.js",
	)
}

func templates_config_js() (*asset, error) {
	bytes, err := templates_config_js_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/config.js", size: 2360, mode: os.FileMode(420), modTime: time.Unix(1422054550, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templates_datasource_gofana_js = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x56\x4d\x6b\xdb\x4c\x10\xbe\xfb\x57\x0c\x22\x20\x89\x08\xf9\x1e\x13\x5e\xde\x26\x14\x7a\xe8\xa1\x1f\x3e\x85\x50\xd6\xda\x91\xbd\xa9\xb4\xab\xec\x87\xc1\x84\xfc\xf7\xce\xae\xac\xcf\x24\xe0\x36\x4d\xaa\x83\x91\x76\x9f\x99\x79\x66\x9e\x99\xf5\x72\x2c\x85\xc4\xe4\x66\x01\x10\x33\xb9\x75\x15\xd3\x71\xe6\x3f\x2a\xc5\x99\xd9\xb5\xef\x3f\x37\xb2\x7d\xa9\x55\x8d\xd2\xc6\x8b\xdb\x6c\x51\x3a\x59\x58\xa1\x24\x24\x47\xb3\x0c\x7e\x64\x40\xc8\x14\x1e\x3c\xd4\x19\x04\x63\xb5\x28\x6c\xbc\x5a\xd0\xc2\x9e\x69\xa8\x15\x77\x15\xc2\x25\x1c\x4d\xf2\x76\x21\x89\xb7\x9a\x95\x4c\xb2\xdc\xa0\xde\x8b\x02\x4d\x9c\x06\x9b\x76\x3b\x2f\x59\x61\x95\x3e\x24\xf1\x95\x33\x56\xd5\xd7\xcc\x32\xa3\x9c\x2e\x30\xce\xa0\xa3\x91\x9c\xdd\x67\x70\xb6\xb3\xb6\xf1\xf1\xc9\x16\x60\xb9\x04\xbb\x43\xe0\x3d\x1c\xd4\xe6\x0e\x0b\x0b\x0d\x33\x06\x39\x58\x05\x85\x92\xc4\xd1\x79\xf7\x9d\x89\x30\xc1\xca\xb0\x9a\x4c\x43\x71\x38\x08\xe9\x91\xa5\xd8\xe6\x77\x26\xe0\xfa\xe4\xe7\x8c\x92\x21\x5a\x5b\x07\xff\xd8\x9d\x30\xb9\xf4\x0e\x2f\x47\x6c\xc2\xca\x6a\x0c\x31\xae\x69\x94\xb6\x9f\xd1\x97\xcd\x10\xb8\x64\x95\x79\x16\xf2\xbf\x94\xca\x32\xcf\xc0\xc3\x28\x83\x29\xca\xe9\x6a\x1a\x8a\x16\x26\x80\x63\xbd\xaf\x3f\x4c\x61\xfd\x72\x07\xf6\xf5\x51\xa4\x40\xa5\xb6\x89\x37\x4c\xdb\x8d\xc7\x55\x5b\xe1\x79\xf6\x79\xa3\x95\x55\xf6\xd0\x60\xce\x7a\x86\x5f\x1c\xea\x83\x4f\xa6\x53\x6a\xd8\xca\x40\x53\x27\xe0\x5a\x36\x4c\x93\x22\x43\xc5\xa6\x91\xa3\x99\xb3\x28\xed\x61\x1a\xad\xd3\x12\x6e\x6e\x4f\x26\x76\x3f\xa7\xa3\x9a\x50\xc7\x21\xf8\x38\x74\xb7\xd9\x15\xe4\xf7\xe3\x71\xac\xd0\xe2\x35\xcd\xd2\x46\x31\xcd\xc7\x91\x05\x7f\x3e\x68\x34\xb7\x89\xce\x09\x7a\x04\xfa\x39\xa2\xbe\x44\xad\xd1\x3b\x3b\xbb\xcf\xc3\x57\x92\x2e\xfa\xa2\x84\x31\x38\x06\x4e\xe2\x25\xef\xfc\x2c\x63\xef\x27\xef\x71\x00\xc6\x15\x34\x6d\x26\xe9\x29\xf9\x66\xc8\x68\x6e\x99\x75\x26\x83\x1d\x32\x8e\x9a\x5e\xda\xee\x1f\xeb\xe3\x9f\x8e\x46\xae\x91\xb8\xef\xd1\x27\xb4\x1a\x21\x1e\x27\xb1\x08\xaa\xf4\xeb\x23\xf9\x09\x4e\xa2\xb5\x64\x1b\x3a\x49\x68\x84\xdb\x34\xdb\x12\x4d\x83\xaf\x16\x53\xd1\x7a\x27\x24\x4e\x2d\xba\xc1\x3a\x41\x42\x83\x4c\x17\xbb\x5e\x0e\x33\xd6\x30\xb4\xd3\x37\x1a\x58\x39\x21\xfd\xb2\x4a\x53\x91\xb6\x68\x49\xa1\x36\xc0\x7f\xc1\xd7\x65\x7c\x3e\xf6\xf9\x86\x6a\x79\xeb\xf7\xd7\xab\xcd\x35\x7a\xa2\xd5\xf0\xf5\x5a\xb9\xa8\xa6\x2f\x8c\x5b\x46\xa7\xfb\x77\xac\x9b\x3f\x57\xea\xfd\x66\xe9\xdf\xa8\x43\x59\x02\x9f\x9e\x3b\x2f\x0c\xd5\xdf\x50\xca\xb0\xfd\xf3\x27\x63\x4f\x61\xae\x94\xf0\x30\x94\x85\xe2\xb8\xfe\xfa\xe9\x4a\xd5\x8d\x92\x74\x23\x49\xe8\xde\x91\x9b\xca\x6d\x45\x79\xf8\xa8\xf4\x5a\x57\x83\x8b\xdc\x0a\x5b\x61\x3a\xca\x63\xd8\x0a\xee\x04\x1f\x25\x75\x6a\x3b\x34\xca\x3c\xed\x87\x6c\x70\xfd\x96\xad\xf1\x00\x21\xa5\x0b\x98\xe5\x98\x01\xfd\xcf\x5f\x40\x34\x62\xc5\x37\xcb\x08\xce\x7d\xd9\x1e\xd3\xf7\xec\xa5\x70\xbb\xf2\xf2\x9e\xde\x4d\x27\x35\xd3\x11\x34\xef\xa9\xb0\x1b\xdc\xd1\xcf\xaf\x00\x00\x00\xff\xff\x3f\x98\xe7\x2b\xd3\x0a\x00\x00")

func templates_datasource_gofana_js_bytes() ([]byte, error) {
	return bindata_read(
		_templates_datasource_gofana_js,
		"templates/datasource.gofana.js",
	)
}

func templates_datasource_gofana_js() (*asset, error) {
	bytes, err := templates_datasource_gofana_js_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/datasource.gofana.js", size: 2771, mode: os.FileMode(420), modTime: time.Unix(1421957735, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/config.js": templates_config_js,
	"templates/datasource.gofana.js": templates_datasource_gofana_js,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"templates": &_bintree_t{nil, map[string]*_bintree_t{
		"config.js": &_bintree_t{templates_config_js, map[string]*_bintree_t{
		}},
		"datasource.gofana.js": &_bintree_t{templates_datasource_gofana_js, map[string]*_bintree_t{
		}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

