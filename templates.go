package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _templates_config_js = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x56\x4b\x8f\xdb\xb6\x13\xbf\xfb\x53\x0c\x7c\xd1\x6e\xe0\x58\xc9\x55\xf9\xe7\x8f\x36\xbb\x45\x10\xa0\x87\xa2\x4d\x0f\xc5\x22\x30\xc6\x22\x65\xb1\xa5\x48\x95\x8f\xda\xc6\xc2\xdf\xbd\x43\x8a\x14\x65\xef\xa2\x87\xa2\x06\x76\x65\xcf\xe3\x37\xef\x19\xd5\x35\x7c\xfc\x08\x0f\x5a\x75\xe2\xe0\x0d\x3a\xa1\xd5\x8a\x68\x6d\x24\x6c\x7f\xb7\x20\x2c\x1c\x7b\x6e\x38\x9c\xb5\x87\xa3\x90\x12\x3a\xa1\x18\xb8\x9e\x93\x10\x91\x3f\x1b\xec\x50\x61\xd2\x48\x10\x5b\xf8\xda\x93\x62\x27\x64\x90\x52\x0e\x85\xb2\x30\xa2\xc1\x81\x3b\x6e\x48\x19\x5d\xb0\x32\x78\xeb\x60\xcf\xc1\xf2\xf0\xe8\x96\x70\xa4\x6d\xbc\x02\xa2\x45\x53\x9d\x30\x24\xea\xc4\xc0\xb7\xab\x15\xe3\xe4\x02\xbf\x7b\xaa\x48\xcf\x09\x75\xb0\xd5\xb7\x0d\x74\x5e\xb5\xc1\xf4\xdd\x2f\x89\x78\x0f\xcf\x2b\x80\xb5\xb7\x84\xef\x8c\x68\xdd\xfa\xc3\x8a\x08\x86\x3b\x6f\x14\x28\x7e\x84\x2c\x79\xf7\x1c\x18\xe1\x53\xbf\x81\x47\x74\x08\x56\x7b\xd3\x72\x9b\xa8\x6f\x28\x45\xff\xee\x33\x03\x04\xd4\x04\x0a\x48\x61\x92\x57\x94\x43\x0d\x1d\x77\x6d\x0f\x94\x15\x72\xd0\x6e\x00\x95\xd2\x2e\x66\x30\xfe\x60\x94\x19\xf3\x17\x07\xb4\xc0\xd0\xf6\x7b\x8d\x86\x48\x4e\x1b\x3c\xf0\x19\x1a\xde\xc2\x6f\x54\x9a\x16\x15\xf4\x48\xc2\x83\x97\x4e\x8c\x94\x78\xdd\xc5\xd4\x59\x4a\x3a\xb8\xf3\x48\x99\x5b\xa8\x1c\xa6\x3c\x3f\x7e\x6a\xc0\x19\xcf\x03\x7d\x40\xf3\x07\xd5\xdb\xc5\xa4\x87\xb4\x85\xe7\x3f\xda\xa5\x42\x20\x59\x2b\x10\x19\x24\xd8\x65\x73\xc8\xc1\xff\x48\x99\xc4\x53\xb8\x29\xc9\x70\x27\xba\xd8\x5b\x57\xce\xdf\x2f\xcd\xec\xd1\x92\x38\x7a\xc2\x50\x4e\xb4\x31\x3f\x4d\xf4\xd0\x1b\x09\xf6\x4c\xfd\x75\x82\xde\xb9\xb1\xa9\x6b\xa2\x1a\x45\x11\x37\x23\x5a\x7b\xd4\x86\x7d\xc7\xf4\x40\xed\xd7\x8c\xda\xb8\x0c\x5a\x4f\xf5\x2e\x1e\xda\x26\x36\x4b\xf8\x3c\x3f\x03\x39\xb4\xa5\x3e\x1c\x7b\xe1\xf8\xaf\x3f\xff\x08\x97\x4b\xe2\x1d\x12\xb1\x48\x43\xcc\x6c\x03\x55\x66\x55\x9b\x99\x43\xce\x35\xb0\xae\x33\x67\x9d\x39\x97\x4d\x31\xc5\x15\x9b\xd1\x93\xe5\x2f\xaa\x93\xfe\xf4\xf8\xe9\xca\xb2\x88\x44\xb6\x7f\xc5\x72\x66\xbd\xb0\x4c\x78\x37\x60\xeb\x22\x72\x6b\x8c\xd2\x56\xac\x01\xcc\x69\x84\xea\x0a\x66\x12\xab\xae\x70\x96\x31\xbc\x00\xfe\x89\xca\xb0\x04\xce\x65\xb9\x01\x4e\x62\x2f\x80\x8b\xea\x4d\xd6\x0a\xa3\xa5\x25\xa2\x87\x57\x12\xf3\x10\x19\x65\xf2\x16\xe0\x29\xb4\x83\x0e\x33\xb0\xa0\xdf\x4c\xc5\x4d\xc5\xe8\x51\xf6\xc4\x67\xa9\xf7\x28\xaf\xd7\x1e\xe8\x31\xce\xee\x7f\xb6\x37\xea\xd9\x60\x0d\x76\xe4\xad\xe8\xce\x71\x92\xa4\x18\xd2\x9c\x2e\xe6\x93\xa3\xa1\x5d\x62\xb8\xa5\x19\xca\x2e\x4c\xc4\x65\x72\x06\x3c\xed\x92\x4c\x03\xef\xdf\xbd\x2b\x21\x16\x53\x79\x50\x7b\x3d\xf0\x62\x21\xf1\x13\x73\x67\xb4\x0f\x93\x50\xd5\xb3\x40\x1d\xf6\x7d\x9d\xf8\x74\x3b\xb4\xaa\x96\xa8\x61\xcb\x87\x95\x87\x92\x26\x97\xbe\x30\x61\x71\x4f\x7b\xca\x2b\x4b\xa3\xcf\xa0\xed\x51\x1d\x68\x3f\x1e\xd1\x28\x5a\xcb\x49\x31\x71\x77\x89\xbb\x4b\xdc\x5c\xa0\x1b\xf8\xc5\x96\x09\xc7\xc2\x8e\x58\x6e\xc8\x28\xf1\x2c\x05\x9d\x91\x8e\x23\xdd\x00\x5e\x54\x7f\x38\xe1\x40\x4b\x87\x66\xe6\xfd\xb0\xde\xd0\xff\x7e\x9d\x98\x59\x67\x97\xd1\x92\xcc\xc2\xee\x97\x69\x7d\x1d\x51\xc5\xf0\x72\x99\x72\xa3\xe7\xc3\x46\x51\x90\xdb\x1b\x42\xe4\x18\x4e\x52\x12\x13\xe1\xf2\x49\x7d\x2c\x78\x5f\x83\xab\xde\x8c\xda\xa6\x15\x2e\x6c\x01\xa3\xef\x74\x21\x28\xd6\xd6\x1b\xe1\xce\x1b\xd8\xfb\xc9\xaa\xd3\x23\x2d\xd4\x21\x5e\x16\x43\x97\xd7\xe8\x01\xb0\x6d\x05\xa3\x95\x89\x52\x9e\xa7\xec\x92\x07\xa5\x9e\xb9\x47\x90\x0d\xb4\x1f\x17\x2d\xb2\x98\xd1\xea\xb5\xf6\x78\x88\xa5\xa0\x97\x01\xc5\xf4\x91\xf2\xec\xa8\x88\xa3\xa1\xa3\x7c\x9a\xec\x56\xf9\x88\xbf\x85\xff\x95\xfe\x8c\x72\xff\xcf\x80\x93\xf2\x2e\x12\x77\x93\x72\xb3\x54\xbc\xea\x9c\xef\x19\x0b\x39\x36\xa0\x8f\x2a\xcd\x3b\x39\xa9\xb8\xb4\x73\x99\x3c\xc5\x66\x97\x41\x90\x5a\x2c\x36\xa5\x70\xe2\x5e\x6b\x40\xfa\xd9\xc0\xd3\xb7\xcd\x52\xc9\xf0\x3f\xbd\x30\x9c\xde\x7c\x06\xcd\xbc\xa4\x7e\x0c\xaa\x13\x3e\xb5\x92\x64\xe9\xfd\x05\x6c\xaf\xbd\x0c\xe5\x05\xa9\x91\x71\xb6\x04\x09\x2d\xc7\xa7\xa6\xca\xfe\x2e\x8e\xcd\x2c\xc9\xf8\x48\xab\x8c\xab\x56\x84\x0b\xf4\xb4\x2e\x32\xdb\x69\x35\xad\x67\xdf\x2e\x53\x3a\x2e\xf7\x1f\x56\xe1\xef\xef\x00\x00\x00\xff\xff\x9d\x84\xe5\xdd\xb7\x09\x00\x00")

func templates_config_js_bytes() ([]byte, error) {
	return bindata_read(
		_templates_config_js,
		"templates/config.js",
	)
}

func templates_config_js() (*asset, error) {
	bytes, err := templates_config_js_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/config.js", size: 2487, mode: os.FileMode(420), modTime: time.Unix(1422299085, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templates_datasource_gofana_js = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x56\x4d\x6b\xdb\x4c\x10\xbe\xfb\x57\x0c\x22\x20\x89\x08\xf9\x1e\x13\x5e\xde\x26\x14\x7a\xe8\xa1\x1f\x3e\x85\x50\xd6\xda\x91\xbd\xa9\xb4\xab\xec\x87\xc1\x84\xfc\xf7\xce\xae\xac\xcf\x24\xe0\x36\x4d\xaa\x83\x91\x76\x9f\x99\x79\x66\x9e\x99\xf5\x72\x2c\x85\xc4\xe4\x66\x01\x10\x33\xb9\x75\x15\xd3\x71\xe6\x3f\x2a\xc5\x99\xd9\xb5\xef\x3f\x37\xb2\x7d\xa9\x55\x8d\xd2\xc6\x8b\xdb\x6c\x51\x3a\x59\x58\xa1\x24\x24\x47\xb3\x0c\x7e\x64\x40\xc8\x14\x1e\x3c\xd4\x19\x04\x63\xb5\x28\x6c\xbc\x5a\xd0\xc2\x9e\x69\xa8\x15\x77\x15\xc2\x25\x1c\x4d\xf2\x76\x21\x89\xb7\x9a\x95\x4c\xb2\xdc\xa0\xde\x8b\x02\x4d\x9c\x06\x9b\x76\x3b\x2f\x59\x61\x95\x3e\x24\xf1\x95\x33\x56\xd5\xd7\xcc\x32\xa3\x9c\x2e\x30\xce\xa0\xa3\x91\x9c\xdd\x67\x70\xb6\xb3\xb6\xf1\xf1\xc9\x16\x60\xb9\x04\xbb\x43\xe0\x3d\x1c\xd4\xe6\x0e\x0b\x0b\x0d\x33\x06\x39\x58\x05\x85\x92\xc4\xd1\x79\xf7\x9d\x89\x30\xc1\xca\xb0\x9a\x4c\x43\x71\x38\x08\xe9\x91\xa5\xd8\xe6\x77\x26\xe0\xfa\xe4\xe7\x8c\x92\x21\x5a\x5b\x07\xff\xd8\x9d\x30\xb9\xf4\x0e\x2f\x47\x6c\xc2\xca\x6a\x0c\x31\xae\x69\x94\xb6\x9f\xd1\x97\xcd\x10\xb8\x64\x95\x79\x16\xf2\xbf\x94\xca\x32\xcf\xc0\xc3\x28\x83\x29\xca\xe9\x6a\x1a\x8a\x16\x26\x80\x63\xbd\xaf\x3f\x4c\x61\xfd\x72\x07\xf6\xf5\x51\xa4\x40\xa5\xb6\x89\x37\x4c\xdb\x8d\xc7\x55\x5b\xe1\x79\xf6\x79\xa3\x95\x55\xf6\xd0\x60\xce\x7a\x86\x5f\x1c\xea\x83\x4f\xa6\x53\x6a\xd8\xca\x40\x53\x27\xe0\x5a\x36\x4c\x93\x22\x43\xc5\xa6\x91\xa3\x99\xb3\x28\xed\x61\x1a\xad\xd3\x12\x6e\x6e\x4f\x26\x76\x3f\xa7\xa3\x9a\x50\xc7\x21\xf8\x38\x74\xb7\xd9\x15\xe4\xf7\xe3\x71\xac\xd0\xe2\x35\xcd\xd2\x46\x31\xcd\xc7\x91\x05\x7f\x3e\x68\x34\xb7\x89\xce\x09\x7a\x04\xfa\x39\xa2\xbe\x44\xad\xd1\x3b\x3b\xbb\xcf\xc3\x57\x92\x2e\xfa\xa2\x84\x31\x38\x06\x4e\xe2\x25\xef\xfc\x2c\x63\xef\x27\xef\x71\x00\xc6\x15\x34\x6d\x26\xe9\x29\xf9\x66\xc8\x68\x6e\x99\x75\x26\x83\x1d\x32\x8e\x9a\x5e\xda\xee\x1f\xeb\xe3\x9f\x8e\x46\xae\x91\xb8\xef\xd1\x27\xb4\x1a\x21\x1e\x27\xb1\x08\xaa\xf4\xeb\x23\xf9\x09\x4e\xa2\xb5\x64\x1b\x3a\x49\x68\x84\xdb\x34\xdb\x12\x4d\x83\xaf\x16\x53\xd1\x7a\x27\x24\x4e\x2d\xba\xc1\x3a\x41\x42\x83\x4c\x17\xbb\x5e\x0e\x33\xd6\x30\xb4\xd3\x37\x1a\x58\x39\x21\xfd\xb2\x4a\x53\x91\xb6\x68\x49\xa1\x36\xc0\x7f\xc1\xd7\x65\x7c\x3e\xf6\xf9\x86\x6a\x79\xeb\xf7\xd7\xab\xcd\x35\x7a\xa2\xd5\xf0\xf5\x5a\xb9\xa8\xa6\x2f\x8c\x5b\x46\xa7\xfb\x77\xac\x9b\x3f\x57\xea\xfd\x66\xe9\xdf\xa8\x43\x59\x02\x9f\x9e\x3b\x2f\x0c\xd5\xdf\x50\xca\xb0\xfd\xf3\x27\x63\x4f\x61\xae\x94\xf0\x30\x94\x85\xe2\xb8\xfe\xfa\xe9\x4a\xd5\x8d\x92\x74\x23\x49\xe8\xde\x91\x9b\xca\x6d\x45\x79\xf8\xa8\xf4\x5a\x57\x83\x8b\xdc\x0a\x5b\x61\x3a\xca\x63\xd8\x0a\xee\x04\x1f\x25\x75\x6a\x3b\x34\xca\x3c\xed\x87\x6c\x70\xfd\x96\xad\xf1\x00\x21\xa5\x0b\x98\xe5\x98\x01\xfd\xcf\x5f\x40\x34\x62\xc5\x37\xcb\x08\xce\x7d\xd9\x1e\xd3\xf7\xec\xa5\x70\xbb\xf2\xf2\x9e\xde\x4d\x27\x35\xd3\x11\x34\xef\xa9\xb0\x1b\xdc\xd1\xcf\xaf\x00\x00\x00\xff\xff\x3f\x98\xe7\x2b\xd3\x0a\x00\x00")

func templates_datasource_gofana_js_bytes() ([]byte, error) {
	return bindata_read(
		_templates_datasource_gofana_js,
		"templates/datasource.gofana.js",
	)
}

func templates_datasource_gofana_js() (*asset, error) {
	bytes, err := templates_datasource_gofana_js_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/datasource.gofana.js", size: 2771, mode: os.FileMode(420), modTime: time.Unix(1421957735, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/config.js": templates_config_js,
	"templates/datasource.gofana.js": templates_datasource_gofana_js,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"templates": &_bintree_t{nil, map[string]*_bintree_t{
		"config.js": &_bintree_t{templates_config_js, map[string]*_bintree_t{
		}},
		"datasource.gofana.js": &_bintree_t{templates_datasource_gofana_js, map[string]*_bintree_t{
		}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

