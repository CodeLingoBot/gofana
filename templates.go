package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _templates_config_js = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x56\xdf\x6f\xdb\x36\x10\x7e\xf7\x5f\x71\xf0\x8b\x92\xc2\x8d\xda\x57\x75\x1d\xb6\x26\x43\x51\x60\xc0\x86\x35\x7b\x18\x82\xc2\xa0\x45\xca\xe2\x26\x91\x1a\x7f\xcc\x31\x02\xff\xef\xfb\x48\x91\x92\xec\x64\x1b\x30\xd4\x40\x22\xfb\x7e\x7c\x77\xfc\xee\x78\xa7\xb2\xa4\xf7\xef\xe9\x56\xab\x46\xee\xbd\x61\x4e\x6a\xb5\x82\xac\x8e\x82\x9b\xdf\x2d\x49\x4b\x87\x56\x18\x41\x47\xed\xe9\x20\xbb\x8e\x1a\xa9\x38\xb9\x56\xc0\x08\xe2\x8f\x86\x35\x4c\xb1\xe4\x91\x20\x6e\xe8\xbe\x85\x63\x23\xbb\x60\xa5\x1c\x93\xca\xd2\xc0\x0c\xeb\x85\x13\x06\xce\xcc\x85\x28\xbd\xb7\x8e\x76\x82\xac\x08\x8f\x66\x09\x07\x6f\xe3\x15\x41\x16\x43\x35\xd2\xc0\xd4\xc9\x5e\xdc\xac\x56\x5c\x20\x05\x71\xf5\x50\xc0\xcf\x49\xb5\xb7\xc5\x97\x0d\x35\x5e\xd5\x21\xf4\xd5\xe7\x24\xbc\xa6\xa7\x15\xd1\xda\x5b\xe0\x3b\x23\x6b\xb7\x7e\xb7\x82\xc0\x08\xe7\x8d\x22\x25\x0e\x94\x2d\xaf\x9e\x82\x22\x7c\xca\x57\x74\xc7\x1c\x23\xab\xbd\xa9\x85\x4d\xd2\x57\xa0\xe8\xff\x7d\x26\x80\x80\x9a\x40\x89\xe1\x98\xc8\x0a\x1c\x6a\x6a\x84\xab\x5b\x02\x2b\x48\xd0\x6e\x88\x29\xa5\x5d\x64\x30\xfe\xe0\x60\xc6\xfc\x25\x88\x59\xe2\xcc\xb6\x3b\xcd\x0c\x44\x4e\x1b\xb6\x17\x13\x34\xbd\xa6\xdf\x50\x9a\x9a\x29\x6a\x19\x8c\x7b\xdf\x39\x39\x80\x78\xdd\x44\xea\x2c\x48\x27\x77\x1c\xc0\xdc\xc2\x65\x3f\xf2\x7c\xf7\xa1\x22\x67\xbc\x08\xf2\x9e\x99\x3f\x50\x6f\x17\x49\x0f\xb4\x85\xe7\xbf\xc6\x45\x21\x18\xa2\xcd\x10\x19\x24\xc4\xe5\xd3\x91\x43\xfe\x51\x32\x9a\xa7\xe3\x26\x92\xe9\x4a\x36\xb1\xb7\xce\x92\xbf\x5e\x86\xd9\x31\x0b\x73\xe6\x81\xa1\x9c\xac\x23\x3f\x55\xcc\xd0\x9b\x8e\xec\x11\xfd\xf5\x48\xad\x73\x43\x55\x96\x90\x1a\x85\x13\x57\x03\xb3\xf6\xa0\x0d\xff\x8e\xeb\x1e\xed\x57\x0d\xda\xb8\x0c\x5a\x8e\xf5\x9e\x33\xb4\x55\x6c\x96\xf0\x79\x7a\x22\x24\x74\x83\x3e\x1c\x5a\xe9\xc4\xaf\xbf\xfc\x48\xa7\x53\xd2\xed\x93\x70\xb6\xa6\xc8\x6c\x45\x45\x56\x15\x9b\x49\x83\xe4\x2a\x5a\x97\x59\xb3\xce\x9a\xd3\x66\x0e\x25\x14\x9f\xd0\x53\xe4\x4f\xaa\xe9\xfc\xe3\xdd\x87\xb3\xc8\x32\x0a\xf9\xee\x85\xc8\x59\xf5\x2c\x32\xf0\x2e\xc0\xd6\xb3\xc9\x65\x30\xd0\x36\x47\x23\x9a\x68\xa4\xe2\x0c\x66\x34\x2b\xce\x70\x96\x67\x78\x06\xfc\x33\xca\xb0\x04\xce\x65\xb9\x00\x4e\x66\xcf\x80\x67\xd7\xff\x60\xed\xa7\x41\xa8\xfb\xcf\xc8\x10\x1d\x31\xe9\x34\x84\xce\xbe\xc8\x5a\x56\x3d\xaf\x57\xd6\xfc\x53\xbd\x66\xf8\x1a\xe3\x4b\xf7\x2f\x80\xdf\x46\xc5\x7c\xe7\x17\x41\x12\xa9\x7b\x1d\x6e\xdf\x42\x7e\x71\x1f\x2f\x62\xe3\x31\x4f\xa8\x8f\x9d\xde\xb1\xee\x7c\xe0\xe2\xa8\x71\x6a\x7c\xb5\x89\x55\x4e\x01\x4b\xb2\x83\xa8\x65\x73\x8c\x77\xb8\x93\x7d\x9a\x10\x8b\xc9\x20\x98\xc1\x14\x33\xc2\xe2\xf6\xe6\x14\x46\xe1\x92\x9c\x9e\x3d\x6e\x93\x4d\x45\x6f\xdf\xbc\x99\x8f\x38\x87\xca\x23\xa2\xd5\xbd\x98\x23\x24\x7d\x52\x6e\x8d\xf6\xe1\x0e\x16\xe5\x64\x50\x86\x4d\x53\x26\x3d\xb6\x96\x56\xc5\x12\x35\xec\x97\x30\x6c\x59\x87\x99\x81\x2f\x5c\x5a\xb6\xc3\x84\xf4\xca\x62\xe8\x70\xaa\x5b\xa6\xf6\x98\xcc\x07\x66\x14\x16\x42\x72\x4c\xda\x6d\xd2\x6e\x93\x36\x17\xe8\x02\x7e\x31\xdf\xc2\x9a\xb2\x03\x9b\xb7\xd7\xd0\xb1\x63\x27\xb1\xc0\x1a\xc1\xb0\x7d\xc4\xec\xfa\xc3\x23\xeb\x31\xee\xd0\x77\x6f\xfb\xf5\x06\xff\xdb\x75\x52\x66\x9f\x6d\x46\x4b\x36\x8b\xb8\x9f\xc6\xc1\x79\x60\x2a\x1e\x2f\x97\x29\x5f\xb1\xbc\x52\x71\x0a\xa4\xbd\x01\xa2\x60\x61\x19\x26\x33\x19\x76\x6e\xa7\x0f\x33\xde\x7d\x48\xd5\x9b\x41\xdb\xb4\x3c\xa4\x9d\xc1\xf0\x1d\xbb\x09\x67\xad\xbd\x91\xee\xb8\xa1\x9d\x1f\xa3\x3a\x3d\x60\x94\xf7\x71\xa7\x19\xec\x7c\xa3\x7b\x62\x75\x2d\x39\xae\x11\xeb\xba\xe3\xc8\x2e\x32\x98\xeb\x99\x7b\x84\xf1\x1e\x93\x79\xd1\x22\x8b\xe9\x50\xbc\xd4\x1e\xb7\xb1\x14\x78\x0d\x51\x5c\x1f\xc0\xb3\x43\x11\x07\x83\xd7\x81\xc7\x31\x6e\x91\x5f\x1f\x5e\xd3\x37\x73\x7f\x46\xbb\x6f\x33\xe0\xe8\xbc\x8d\xc2\xed\xe8\x5c\x2d\x1d\xcf\x3a\xe7\x7b\xce\x03\xc7\x86\xf4\x41\xa5\xfb\x8e\x24\x95\xe8\xec\x54\x26\x8f\xb3\xd9\xe5\x21\xe0\x16\x8b\x0d\x0a\x47\xed\xb9\x07\xa5\x9f\x15\x3d\x7c\xd9\x2c\x9d\x8c\xf8\xd3\x4b\x23\xf0\xce\xd5\x6b\xee\x3b\xf4\x63\x70\x1d\xf1\xd1\x4a\x1d\x4f\x6f\x4e\x64\x5b\xed\xbb\x50\x5e\xea\x34\xe3\x82\x2f\x41\x42\xcb\x89\xb1\xa9\x72\xbe\x8b\x35\x37\x59\x72\x81\x29\x87\x0a\xd5\x32\xec\xbe\x87\xf5\x6c\x73\x33\x8e\xa6\xf5\x94\xdb\x69\xa4\xe3\x74\xfd\x6e\x15\xfe\xfe\x0e\x00\x00\xff\xff\x92\x3e\x51\x67\x31\x0a\x00\x00")

func templates_config_js_bytes() ([]byte, error) {
	return bindata_read(
		_templates_config_js,
		"templates/config.js",
	)
}

func templates_config_js() (*asset, error) {
	bytes, err := templates_config_js_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/config.js", size: 2609, mode: os.FileMode(420), modTime: time.Unix(1422391948, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templates_datasource_gofana_js = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x56\x4d\x6b\xdb\x4c\x10\xbe\xfb\x57\x0c\x22\x20\x89\x08\xf9\x1e\x13\x5e\xde\x26\x14\x7a\xe8\xa1\x1f\x3e\x85\x50\xd6\xda\x91\xbd\xa9\xb4\xab\xec\x87\xc1\x84\xfc\xf7\xce\xae\xac\xcf\x24\xe0\x36\x4d\xaa\x83\x91\x76\x9f\x99\x79\x66\x9e\x99\xf5\x72\x2c\x85\xc4\xe4\x66\x01\x10\x33\xb9\x75\x15\xd3\x71\xe6\x3f\x2a\xc5\x99\xd9\xb5\xef\x3f\x37\xb2\x7d\xa9\x55\x8d\xd2\xc6\x8b\xdb\x6c\x51\x3a\x59\x58\xa1\x24\x24\x47\xb3\x0c\x7e\x64\x40\xc8\x14\x1e\x3c\xd4\x19\x04\x63\xb5\x28\x6c\xbc\x5a\xd0\xc2\x9e\x69\xa8\x15\x77\x15\xc2\x25\x1c\x4d\xf2\x76\x21\x89\xb7\x9a\x95\x4c\xb2\xdc\xa0\xde\x8b\x02\x4d\x9c\x06\x9b\x76\x3b\x2f\x59\x61\x95\x3e\x24\xf1\x95\x33\x56\xd5\xd7\xcc\x32\xa3\x9c\x2e\x30\xce\xa0\xa3\x91\x9c\xdd\x67\x70\xb6\xb3\xb6\xf1\xf1\xc9\x16\x60\xb9\x04\xbb\x43\xe0\x3d\x1c\xd4\xe6\x0e\x0b\x0b\x0d\x33\x06\x39\x58\x05\x85\x92\xc4\xd1\x79\xf7\x9d\x89\x30\xc1\xca\xb0\x9a\x4c\x43\x71\x38\x08\xe9\x91\xa5\xd8\xe6\x77\x26\xe0\xfa\xe4\xe7\x8c\x92\x21\x5a\x5b\x07\xff\xd8\x9d\x30\xb9\xf4\x0e\x2f\x47\x6c\xc2\xca\x6a\x0c\x31\xae\x69\x94\xb6\x9f\xd1\x97\xcd\x10\xb8\x64\x95\x79\x16\xf2\xbf\x94\xca\x32\xcf\xc0\xc3\x28\x83\x29\xca\xe9\x6a\x1a\x8a\x16\x26\x80\x63\xbd\xaf\x3f\x4c\x61\xfd\x72\x07\xf6\xf5\x51\xa4\x40\xa5\xb6\x89\x37\x4c\xdb\x8d\xc7\x55\x5b\xe1\x79\xf6\x79\xa3\x95\x55\xf6\xd0\x60\xce\x7a\x86\x5f\x1c\xea\x83\x4f\xa6\x53\x6a\xd8\xca\x40\x53\x27\xe0\x5a\x36\x4c\x93\x22\x43\xc5\xa6\x91\xa3\x99\xb3\x28\xed\x61\x1a\xad\xd3\x12\x6e\x6e\x4f\x26\x76\x3f\xa7\xa3\x9a\x50\xc7\x21\xf8\x38\x74\xb7\xd9\x15\xe4\xf7\xe3\x71\xac\xd0\xe2\x35\xcd\xd2\x46\x31\xcd\xc7\x91\x05\x7f\x3e\x68\x34\xb7\x89\xce\x09\x7a\x04\xfa\x39\xa2\xbe\x44\xad\xd1\x3b\x3b\xbb\xcf\xc3\x57\x92\x2e\xfa\xa2\x84\x31\x38\x06\x4e\xe2\x25\xef\xfc\x2c\x63\xef\x27\xef\x71\x00\xc6\x15\x34\x6d\x26\xe9\x29\xf9\x66\xc8\x68\x6e\x99\x75\x26\x83\x1d\x32\x8e\x9a\x5e\xda\xee\x1f\xeb\xe3\x9f\x8e\x46\xae\x91\xb8\xef\xd1\x27\xb4\x1a\x21\x1e\x27\xb1\x08\xaa\xf4\xeb\x23\xf9\x09\x4e\xa2\xb5\x64\x1b\x3a\x49\x68\x84\xdb\x34\xdb\x12\x4d\x83\xaf\x16\x53\xd1\x7a\x27\x24\x4e\x2d\xba\xc1\x3a\x41\x42\x83\x4c\x17\xbb\x5e\x0e\x33\xd6\x30\xb4\xd3\x37\x1a\x58\x39\x21\xfd\xb2\x4a\x53\x91\xb6\x68\x49\xa1\x36\xc0\x7f\xc1\xd7\x65\x7c\x3e\xf6\xf9\x86\x6a\x79\xeb\xf7\xd7\xab\xcd\x35\x7a\xa2\xd5\xf0\xf5\x5a\xb9\xa8\xa6\x2f\x8c\x5b\x46\xa7\xfb\x77\xac\x9b\x3f\x57\xea\xfd\x66\xe9\xdf\xa8\x43\x59\x02\x9f\x9e\x3b\x2f\x0c\xd5\xdf\x50\xca\xb0\xfd\xf3\x27\x63\x4f\x61\xae\x94\xf0\x30\x94\x85\xe2\xb8\xfe\xfa\xe9\x4a\xd5\x8d\x92\x74\x23\x49\xe8\xde\x91\x9b\xca\x6d\x45\x79\xf8\xa8\xf4\x5a\x57\x83\x8b\xdc\x0a\x5b\x61\x3a\xca\x63\xd8\x0a\xee\x04\x1f\x25\x75\x6a\x3b\x34\xca\x3c\xed\x87\x6c\x70\xfd\x96\xad\xf1\x00\x21\xa5\x0b\x98\xe5\x98\x01\xfd\xcf\x5f\x40\x34\x62\xc5\x37\xcb\x08\xce\x7d\xd9\x1e\xd3\xf7\xec\xa5\x70\xbb\xf2\xf2\x9e\xde\x4d\x27\x35\xd3\x11\x34\xef\xa9\xb0\x1b\xdc\xd1\xcf\xaf\x00\x00\x00\xff\xff\x3f\x98\xe7\x2b\xd3\x0a\x00\x00")

func templates_datasource_gofana_js_bytes() ([]byte, error) {
	return bindata_read(
		_templates_datasource_gofana_js,
		"templates/datasource.gofana.js",
	)
}

func templates_datasource_gofana_js() (*asset, error) {
	bytes, err := templates_datasource_gofana_js_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/datasource.gofana.js", size: 2771, mode: os.FileMode(420), modTime: time.Unix(1421957735, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/config.js": templates_config_js,
	"templates/datasource.gofana.js": templates_datasource_gofana_js,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"templates": &_bintree_t{nil, map[string]*_bintree_t{
		"config.js": &_bintree_t{templates_config_js, map[string]*_bintree_t{
		}},
		"datasource.gofana.js": &_bintree_t{templates_datasource_gofana_js, map[string]*_bintree_t{
		}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

